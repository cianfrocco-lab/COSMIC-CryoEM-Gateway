<?xml version = "1.0" encoding = "UTF-8" ?>
<!DOCTYPE pise PUBLIC "pise2.dtd" "pise2.dtd"  [
<!ENTITY runtime_tg PUBLIC "run_time2.xml.in" "run_time2.xml.in" >
]>
<!-- Created by Mark Miller for CryoEM project around 5/24/2016-->
<pise>
  <head>
    <title>Relion 2D classification</title>
    <version>1.4</version>
    <description>Calculate 2D class averages using Relion</description>
    <authors>S. H. W. Scheres</authors>
    <reference>Scheres, S. H. W. (2012) RELION: Implementation of a Bayesian approach to cryo-EM structure determination. Journal of Structural Biology 180, 519-530</reference>
    <category>Structural Biology</category>
    <doclink>http://www2.mrc-lmb.cam.ac.uk/relion/index.php/Main_Page</doclink>
  </head>

  <command>relion_2d_class_comet</command>
<!-- 
Per our conversation earlier today, I’m sending along a comet submission script for the analysis routine that will be a part of the gateway. 

First, you can look at an example submission script that I typically have used (‘relion_refine_submission.txt’). The cluster input variables are standard, 
and then there is a single command that will run using MPI. 

The barebones version of the command line input is the following (‘relion_refine_submission_base.txt’). I’ve bolded and underlined the areas that users 
will have to input: 

ibrun -v relion_refine_mpi  —o /path/to/working/directory/[output] -*auto_refine -*split_random_halves —i /path/to/working/directory/[input file] 
-*particle_diameter [user provided] —angpix [user provided] —ref /path/to/working/directory/[user provided] -*ini_high [user provided] -*ctf 
-*flatten_solvent -*zero_mask -*oversampling 1 -*healpix_order 2 -*auto_local_healpix_order 4 -*offset_range [user provided] -*offset_step [user provided] 
—sym [user provided] -*low_resol_join_halves 40 -*norm -*scale  -*j 1 -*memory_per_thread 4

A list of variables that I would change for these test run (or at least an initial list of variables):
—o Output file basename
—i Input file
—particle_diameter Diameter of particle (Angstroms)
—angpix Pixel size of data (A/pix)
—ref 3D model to use as template 
—ini_high Initial filter for 3D volume
—offset_range Pixel search range 
—offset_step Pixel search range step size
—sym Symmetry of sample 
I’m not sure what the next steps are for building out this command, but this is a definite start. There will be a few added changes to the submission command based upon users data, which we will incorporate into the gateway job template page.

Let me know what else I can do to help!
Mike -->

<parameters>
<!-- command name: this parameter precedes all instruction strings -->
    <parameter ishidden="1" type="String"> 
	  <name>relion_invoke</name>
	  <attributes>
	    <format>
		  <language>perl</language>
		  <code>"relion_refine_mpi"</code>
		</format>
		<group>0</group>
	  </attributes>
	</parameter> 
	  
<!-- build the conf file -->
	<parameter ishidden="1" type="String">
		<name>relion_scheduler</name>
		<attributes>
			<paramfile>scheduler.conf</paramfile>
			<format>
				<language>perl</language>
				<code>
<!-- RUN THESE JOBS ON Comet -->
				 "ntasks-per-node=15\\n" .
				 "node_exclusive=1\\n" .
				 "nodes=10\\n"
				</code>
			</format>
			<group>1</group>
		</attributes>
	</parameter>	

<!-- create the non-configurable command line -->
<!--  -->
	<parameter ishidden="1" type="String">
		<name>relion_commandline</name>
		<attributes>
			<format>
				<language>perl</language>
				<code>"--ctf --flatten_solvent --zero_mask --oversampling 1 --healpix_order 2 --auto_local_healpix_order 4 --low_resol_join_halves 40 --norm --scale  --j 1 --memory_per_thread 4"</code>
			</format>
			<group>1</group>
		</attributes>
	</parameter>	

<!-- required input file, this is selected outside the parameters gui -->
    <parameter isinput = "1" type = "InFile">
	  <name>infile</name>
	  <attributes>
	    <prompt>Images File (FASTA format)</prompt>
		<filenames>input.images</filenames>
		<format>
		  <language>perl</language>
		  <code>"-i input.images"</code>
		</format>
	    <group>90</group>
	  </attributes>	  
	</parameter>
	
<!-- output all results files -->
	<parameter type="Results">
	  <name>all_outputfiles</name>
	  <attributes>
	    <filenames>*</filenames>
	  </attributes>
	</parameter>
	  	
<!-- visible input parameters -->	

    <parameter type="Integer" issimple="1" ismandatory="1">
	    <name>particle_diameter</name>
	    <attributes>
		    <group>1</group>
		    <prompt>Particle diameter (Angstroms)</prompt>
		    <format>
			    <language>perl</language>
			    <code>"--particle_diameter $value"</code>
		    </format>
		    <ctrls>
			    <ctrl>
                    <message>Please enter an integer > 0 for the particle diameter (in Angstroms)</message>
				    <language>perl</language>
				    <code>$particle_diameter &lt; 1</code>
			    </ctrl>
		    </ctrls>
	    </attributes>
    </parameter>

    <parameter type="Float" issimple="1" ismandatory="1">
	    <name>pixel_size</name>
	    <attributes>
		    <group>1</group>
		    <prompt>Pixel size of data (Angstroms/pix)</prompt>
		    <format>
			    <language>perl</language>
			    <code>"--angpix $value"</code>
		    </format>
		    <ctrls>
			    <ctrl>
                    <message>Please enter a float > 0.00 for the pixel size (in Angstroms/pix)</message>
				    <language>perl</language>
				    <code>$pixel_size &lt; 0.01</code>
			    </ctrl>
		    </ctrls>
	    </attributes>
    </parameter>

    <parameter type="Integer" issimple="1" ismandatory="1">
	    <name>classes</name>
	    <attributes>
		    <group>1</group>
		    <prompt>Number of classes</prompt>
		    <format>
			    <language>perl</language>
			    <code>"--K $value"</code>
		    </format>
		    <ctrls>
			    <ctrl>
                    <message>Please enter an integer > 0 for the number of classes</message>
				    <language>perl</language>
				    <code>$classes &lt; 1</code>
			    </ctrl>
		    </ctrls>
	    </attributes>
    </parameter>

    <parameter type="Integer" issimple="1" ismandatory="1">
	    <name>iterations</name>
	    <attributes>
		    <group>1</group>
		    <prompt>Number of iterations</prompt>
		    <format>
			    <language>perl</language>
			    <code>"--iter $value"</code>
		    </format>
		    <vdef>
			    <value>25</value>
		    </vdef>
		    <ctrls>
			    <ctrl>
                    <message>Please enter an integer > 0 for the number of iterations</message>
				    <language>perl</language>
				    <code>$iterations &lt; 1</code>
			    </ctrl>
		    </ctrls>
	    </attributes>
    </parameter>

    <parameter type="Integer" issimple="1" ismandatory="1">
	    <name>angular_sampling</name>
	    <attributes>
		    <group>1</group>
		    <prompt>In-plane angular sampling</prompt>
		    <format>
			    <language>perl</language>
			    <code>"--psi_step 2 * $value"</code>
		    </format>
		    <vdef>
			    <value>5</value>
		    </vdef>
		    <ctrls>
			    <ctrl>
                    <message>Please enter an integer > 0 for the in-plane angular sampling</message>
				    <language>perl</language>
				    <code>$angular_sampling &lt; 1</code>
			    </ctrl>
		    </ctrls>
	    </attributes>
    </parameter>

    <parameter type="Integer" issimple="1" ismandatory="1">
	    <name>pixel_range</name>
	    <attributes>
		    <group>1</group>
		    <prompt>Pixel search range (pixels)</prompt>
		    <format>
			    <language>perl</language>
			    <code>"--offset_range $value"</code>
		    </format>
		    <vdef>
			    <value>5</value>
		    </vdef>
		    <ctrls>
			    <ctrl>
                    <message>Please enter an integer > 0 for the pixel search range (in pixels)</message>
				    <language>perl</language>
				    <code>$pixel_range &lt; 1</code>
			    </ctrl>
		    </ctrls>
	    </attributes>
    </parameter>

    <parameter type="Integer" issimple="1" ismandatory="1">
	    <name>step_size</name>
	    <attributes>
		    <group>1</group>
		    <prompt>Pixel search range step size (pixels)</prompt>
		    <format>
			    <language>perl</language>
			    <code>"--offset_step 2 * $value"</code>
		    </format>
		    <vdef>
			    <value>1</value>
		    </vdef>
		    <ctrls>
			    <ctrl>
                    <message>Please enter an integer > 0 for the pixel search range step size (in pixels)</message>
				    <language>perl</language>
				    <code>$step_size &lt; 1</code>
			    </ctrl>
		    </ctrls>
	    </attributes>
    </parameter>

    <!-- set the run time -->		
    <parameter type="Float" issimple="1" ismandatory="1">
	    <name>runtime</name>
	    <attributes>
		    <group>1</group>
		    <paramfile>scheduler.conf</paramfile>
		    <prompt>Maximum Relion runtime (hours)</prompt>
		    <vdef>
			    <value>12</value>
		    </vdef>
		    <comment>
			    <value>
				Estimate the maximum time your job will need to run (up to 48 hrs).  Your job will be killed if it doesn't finish within the time you specify, however jobs with shorter maximum run times are often scheduled sooner than longer jobs.
			    </value>
		    </comment>
		    <ctrls>
			    <ctrl>
                    <message>Please enter a float between 0.1 and 48.0, inclusively, for the maximum run time (in hours)</message>
				    <language>perl</language>
                    <code>$runtime &lt; 0.1 || $runtime &gt; 48.0</code>
			    </ctrl>
		    </ctrls>
		    <format>
			    <language>perl</language>
			    <code>"runhours=$value\\n"</code>
		    </format>
	    </attributes>
    </parameter>

    <parameter type="String" issimple="1" ismandatory="1">
	    <name>basename</name>
	    <attributes>
		    <group>1</group>
		    <prompt>Basename to use for the output file</prompt>
		    <format>
			    <language>perl</language>
			    <code>"-o $value"</code>
		    </format>
		    <comment>
			    <value>This value determines the name of output files.</value>
		    </comment>
		    <ctrls>
			    <ctrl>
				    <message>Please enter a string for the base name of the output file</message>
				    <language>perl</language>
				    <code>!$basename</code>
			    </ctrl>
		    </ctrls>
	    </attributes>
    </parameter>

    <!-- Advanced parameters -->
    
    <parameter type="Excl" ismandatory="1">
	    <name>ctf_correction</name>
	    <attributes>
		    <group>1</group>
		    <prompt>Do CTF correction?</prompt>
		    <format>
			    <language>perl</language>
			    <code>"--ctf $value"</code>
		    </format>
            <vlist>
                <value>yes</value>
                <label>Yes</label>
                <value>no</value>
                <label>No</label>
            </vlist>
            <vdef>
                <value>yes</value>
            </vdef>
	    </attributes>
    </parameter>

    <parameter type="Excl" ismandatory="1">
	    <name>phase_flipped</name>
	    <attributes>
		    <group>1</group>
		    <prompt>Have data been phase-flipped</prompt>
		    <format>
			    <language>perl</language>
			    <code>"--ctf_phase_flipped $value"</code>
		    </format>
            <vlist>
                <value>yes</value>
                <label>Yes</label>
                <value>no</value>
                <label>No</label>
            </vlist>
            <vdef>
                <value>no</value>
            </vdef>
	    </attributes>
    </parameter>

    <parameter type="Excl" ismandatory="1">
	    <name>ignore_ctfs</name>
	    <attributes>
		    <group>1</group>
		    <prompt>Ignore CTFs until first peak</prompt>
		    <format>
			    <language>perl</language>
			    <code>"--ctf_intact_first_peak $value"</code>
		    </format>
            <vlist>
                <value>yes</value>
                <label>Yes</label>
                <value>no</value>
                <label>No</label>
            </vlist>
            <vdef>
                <value>no</value>
            </vdef>
	    </attributes>
    </parameter>

    <parameter type="Integer" ismandatory="1">
	    <name>regularization</name>
	    <attributes>
		    <group>1</group>
		    <prompt>Regularization parameter</prompt>
		    <format>
			    <language>perl</language>
			    <code>"--tau2_fudge $value"</code>
		    </format>
		    <vdef>
			    <value>2</value>
		    </vdef>
		    <ctrls>
			    <ctrl>
				    <message>Please enter an integer between 1 and 4, inclusively, for the regularization parameter</message>
				    <language>perl</language>
				    <code>$regularization &lt; 1 || $regularization &gt; 4</code>
			    </ctrl>
		    </ctrls>
	    </attributes>
    </parameter>

    <parameter type="Integer" ismandatory="1">
	    <name>e_step_limit</name>
	    <attributes>
		    <group>1</group>
		    <prompt>Limit resolution E-step to (Angstroms)</prompt>
		    <format>
			    <language>perl</language>
			    <code>"--strict_highres_exp $value"</code>
		    </format>
		    <vdef>
			    <value>-1</value>
		    </vdef>
		    <ctrls>
			    <ctrl>
                    <message>Please enter a non-zero integer > -1 for E-step resolution limit (in Angstroms)</message>
				    <language>perl</language>
				    <code>$e_step_limit &lt; -1 || $e_step_limit == 0</code>
			    </ctrl>
		    </ctrls>
	    </attributes>
    </parameter>

    <parameter type="Excl" ismandatory="1">
	    <name>image_alignment</name>
	    <attributes>
		    <group>1</group>
		    <prompt>Perform image alignment</prompt>
		    <format>
			    <language>perl</language>
			    <code>"--skip_align $value"</code>
		    </format>
            <vlist>
                <value>yes</value>
                <label>Yes</label>
                <value>no</value>
                <label>No</label>
            </vlist>
            <vdef>
                <value>yes</value>
            </vdef>
	    </attributes>
    </parameter>

</parameters>

</pise>
