<?xml version = "1.0" encoding = "UTF-8" ?>
<!DOCTYPE pise PUBLIC "pise2.dtd" "pise2.dtd"  [
<!ENTITY runtime_tg PUBLIC "run_time2.xml.in" "run_time2.xml.in" >
]>
<!-- Created by Mark Miller for CryoEM project around 5/24/2016-->
<pise>
  <head>
    <title>cryoDRGN - Deep Reconstructing Generative Networks for cryo-EM heterogeneous reconstruction</title>
    <version>0.2.1</version>
    <description>Perform structural analysis of 3D reconstructions using deep learning</description>
    <authors>E. Zhong, T. Bepler, B. Berger, J.H. Davis </authors>
<!--
    <reference>Scheres, S. H. W. (2012) RELION: Implementation of a Bayesian approach to cryo-EM structure determination. Journal of Structural Biology 180, 519-530</reference>
 -->
	<reference>https://www.biorxiv.org/content/10.1101/2020.03.27.003871v1</reference>
    <category>3D heterogeneity analysis</category>
    <doclink>https://github.com/zhonge/cryodrgn</doclink>
  </head>

  <command>cryodrgn</command>
<!-- 
Per our conversation earlier today, I’m sending along a comet submission script for the analysis routine that will be a part of the gateway. 

First, you can look at an example submission script that I typically have used (‘relion_refine_submission.txt’). The cluster input variables are standard, 
and then there is a single command that will run using MPI. 

The barebones version of the command line input is the following (‘relion_refine_submission_base.txt’). I’ve bolded and underlined the areas that users 
will have to input: 

ibrun -v relion_refine_mpi  —o /path/to/working/directory/[output] -*auto_refine -*split_random_halves —i /path/to/working/directory/[input file] 
-*particle_diameter [user provided] —angpix [user provided] —ref /path/to/working/directory/[user provided] -*ini_high [user provided] -*ctf 
-*flatten_solvent -*zero_mask -*oversampling 1 -*healpix_order 2 -*auto_local_healpix_order 4 -*offset_range [user provided] -*offset_step [user provided] 
—sym [user provided] -*low_resol_join_halves 40 -*norm -*scale  -*j 1 -*memory_per_thread 4

A list of variables that I would change for these test run (or at least an initial list of variables):
—o Output file basename
—i Input file
—particle_diameter Diameter of particle (Angstroms)
—angpix Pixel size of data (A/pix)
—ref 3D model to use as template 
—ini_high Initial filter for 3D volume
—offset_range Pixel search range 
—offset_step Pixel search range step size
—sym Symmetry of sample 
I’m not sure what the next steps are for building out this command, but this is a definite start. There will be a few added changes to the submission command based upon users data, which we will incorporate into the gateway job template page.

Let me know what else I can do to help!
Mike -->

<parameters>
<!-- command name: this parameter precedes all instruction strings -->
    <parameter ishidden="1" type="String"> 
	  <name>relion_invoke</name>
	  <attributes>
	    <format>
		  <language>perl</language>
		  <code>"cryodrgn"</code>
		</format>
		<group>0</group>
	  </attributes>
	</parameter> 
	  
<!-- build the conf file -->
	<parameter ishidden="1" type="String">
		<name>relion_scheduler</name>
		<attributes>
			<paramfile>scheduler.conf</paramfile>
			<format>
				<language>perl</language>
				<code>
<!-- RUN THESE JOBS ON Comet -->
                 "gpu=1\\n" .
                 "runhours=12\\n" .
                 "ChargeFactor=1.0\\n" .
				 "ntasks-per-node=1\\n" .
				 "node_exclusive=1\\n" .
				 "nodes=1\\n"
				</code>
			</format>
			<group>1</group>
		</attributes>
	</parameter>	

<!-- create the non-configurable command line -->
<!--  -->
	<parameter ishidden="1" type="String">
		<name>relion_commandline</name>
		<attributes>
			<group>1</group>
		</attributes>
	</parameter>	

<!-- required input file, this is selected outside the parameters gui -->
    <parameter isinput = "1" type = "InFile">
	  <name>infile</name>
	  <attributes>
	    <prompt>Image File</prompt>
		<format>
		  <language>perl</language>
		  <code>"--i \"$value\""</code>
		</format>
	    <group>90</group>
	  </attributes>	  
	</parameter>

	<parameter type="Results">
      <name>stderr.txt</name>
      <attributes>
        <filenames>stderr</filenames>
      </attributes>
    </parameter>

	<parameter type="Results">
      <name>cryoDRGN output</name>
      <attributes>
        <filenames>*.zip</filenames>
      </attributes>
    </parameter>
	
<!-- visible input parameters -->	

	<parameter type="InFile" issimple="1" ismandatory="1">
        <name>starfile</name>
        <attributes>
            <group>1</group>
            <prompt>Consensus refinement STAR/.cs file</prompt>
            <format>
                <language>perl</language>
                <code>"--consensus $value"</code>
            </format>
            <ctrls>
                <ctrl>
                    <message>Please provide a consensus refinement STAR or .cs file</message>
                    <language>perl</language>
                    <code>!$starfile</code>
                </ctrl>
            </ctrls>
        </attributes>
    </parameter>

	<parameter type="Integer" issimple="1" ismandatory="1">
        <name>origbox</name>
        <attributes>
            <group>1</group>
            <prompt>Box size for refined structure</prompt>
            <format>
                <language>perl</language>
                <code>"--origbox $value"</code>
            </format>
        </attributes>
    </parameter>

	<parameter type="Integer" issimple="1" ismandatory="1">
        <name>D</name>
        <attributes>
            <group>1</group>
            <prompt>Scaled-down box size (-D)</prompt>
            <format>
                <language>perl</language>
                <code>"--D $value"</code>
            </format>
			<vdef>
				<value>128</value>
            </vdef>
        </attributes>
    </parameter>

	<parameter type="Float" ismandatory="1" issimple="1">
        <name>angpix</name>
        <attributes>
            <group>1</group>
            <prompt>Pixel size of data, in Angstroms/pixel</prompt>
            <format>
                <language>perl</language>
                <code>"--angpix $value"</code>
            </format>
            <ctrls>
                <ctrl>
                    <message>Please enter a float > 0.00 for the pixel size (in Angstroms/pix)</message>
                    <language>perl</language>
                    <code>$angpix &lt; 0.01</code>
                </ctrl>
            </ctrls>
        </attributes>
    </parameter>

    <parameter type="Integer" issimple="1" ismandatory="1">
        <name>zdim</name>
        <attributes>
            <group>1</group>
            <prompt>Dimension of latent variable (--zdim) (fast=1; slow=10)</prompt>
            <format>
				<language>perl</language>
				<code>"--zdim $value"</code>
            </format>
            <vdef>
				<value>1</value>
            </vdef>
        </attributes>
    </parameter>
	
    <parameter type="Integer" issimple="1" ismandatory="1">
	    <name>epochs</name>
	    <attributes>
		    <group>1</group>
		    <prompt>Number of epochs to use during training (-n) </prompt>
		    <format>
			    <language>perl</language>
			    <code>"-n $value"</code>
		    </format>
			<vdef>
                <value>50</value>
            </vdef>
	    </attributes>
    </parameter>

	<parameter type="Integer" ismandatory="1">
        <name>qdim</name>
        <attributes>
            <group>1</group>
            <prompt>Advanced: Number of nodes in hidden layers for encoder (--qdim)</prompt>
            <vdef>
                <value>256</value>
            </vdef>
            <format>
                <language>perl</language>
                <code>"--qdim $value"</code>
            </format>
        </attributes>
    </parameter>

	<parameter type="Integer" ismandatory="1">
        <name>qlayers</name>
        <attributes>
            <group>1</group>
            <prompt>Advanced: Number of hidden layers for encoder (--qlayers)</prompt>
            <vdef>
                <value>3</value>
            </vdef>
            <format>
                <language>perl</language>
                <code>"--qlayers $value"</code>
            </format>
        </attributes>
    </parameter>

	<parameter type="Integer" ismandatory="1">
        <name>pdim</name>
        <attributes>
            <group>1</group>
            <prompt>Advanced: Number of nodes in hidden layers for decoder (--pdim)</prompt>
            <vdef>
                <value>256</value>
            </vdef>
            <format>
                <language>perl</language>
                <code>"--pdim $value"</code>
            </format>
        </attributes>
    </parameter>

	<parameter type="Integer" ismandatory="1">
        <name>players</name>
        <attributes>
            <group>1</group>
            <prompt>Advanced: Number of hidden layers for decoder (--players)</prompt>
            <vdef>
                <value>3</value>
            </vdef>
            <format>
                <language>perl</language>
                <code>"--players $value"</code>
            </format>
        </attributes>
    </parameter>

    <parameter type="Switch">
        <name>relion31</name>
        <attributes>
            <group>1</group>
            <prompt>Optional: Check box if STAR file is from RELION v. 3.1</prompt>
            <format>
                <language>perl</language>
                <code>($value) ? " --relion31" : ""</code>
            </format>
            <vdef>
                <value>0</value>
            </vdef>
       </attributes>
    </parameter>

    <parameter type="Switch">
	    <name>invert</name>
	    <attributes>
		    <group>1</group>
		    <prompt>Optional: Invert contrast (needed if particles are white on black background)</prompt>
		    <format>
			    <language>perl</language>
			    <code>($value) ? " --invert" : ""</code>
		    </format>
            <vdef>
                <value>1</value>
            </vdef>
	    </attributes>
    </parameter>

</parameters>

</pise>

